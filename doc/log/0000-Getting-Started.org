#+TITLE: GloUI, Getting Started

GloUI is a good name! From there, where to go?


* First, make all ~npm~ packages work.

For this we need, in this order:

  1) [ ] gxjs-loader
  2) [ ] gambit-scheme
  3) [ ] gerbil-scheme
  4) [ ] gxjs

* Now, make a package and install quasar

#+begin_src shell
cd ~/me/MuKn/src/gloui
yarn init
yarn global add @quasar/cli
export LD=$CC yarn install
LD=$CC quasar create


#   ___
#  / _ \ _   _  __ _ ___  __ _ _ __
# | | | | | | |/ _` / __|/ _` | '__|
# | |_| | |_| | (_| \__ \ (_| | |
#  \__\_\\__,_|\__,_|___/\__,_|_|



# ? Generate project in current directory? Yes
# ? Project name (internal usage for dev) gloui
# ? Project product name (must start with letter if building mobile apps) GloUI
# ? Project description A User Interface for Glow dapps on Blockchains
# ? Author Drew Crampsie <me@drewc.ca>
# ? Pick your favorite CSS preprocessor: (can be changed later) None
# ? Pick a Quasar components & directives import strategy: (can be changed later) Auto import
# ? Check the features needed for your project: ESLint (recommended), Vuex, Axios
# ? Pick an ESLint preset: Standard
# ? Continue to install project dependencies after the project has been created? (recommended) yarn

#   Quasar CLI Â· Generated "gloui".

#+end_src

#+RESULTS:

* HTML Layout
#+ATTR_ORG: :width 1000
[[../img/Deploy.png]]


* Task Description

   1) Create drop down menu to select FROM address from addresses in address book that:
      a) Are registered as having the private key on file or in a linked wallet.
      b) Have tags have matching the current context.
      c) modify the context with regard to tags they are allowed to interact with.

   2) [ ]





* ~MuKn-glow~ *npm* package


Task description 1 has an Address Book. Time to use our GxJS.

   1) Create drop down menu to select FROM address from addresses in address book that:
      a) Are registered as having the private key on file or in a linked wallet.

         #+begin_src scheme :noweb-ref get-FROM-address-book
(def (get-FROM-address-book pkey)
  [
     { name: "Alice Eat Me"
       hash: (random-hash)
       tags: ["foo" "bar" "rps"]
       private-key: "THISISPRIVATE" }
     { name: "Alice Drink Me"
       hash: (random-hash)
       tags: ["baz" "rps" "moonshine"]
       private-key: "THISISPRIVATE" }
     { name: "Bob"
       hash: (random-hash)
       tags: ["foo" "rps"] }
     { name: "Charlie Noble"
       hash: (random-hash)
       tags: ["bar"] }
     ]

  )
         #+end_src

      b) Have tags have matching the current context.

         #+begin_src javascript :noweb-ref has-tags
((book, tags) => {
  function hasTag(address, tag) {
    // console.log('Has tag?', address, tag)
    return address.tags.find(t => t === tag) }
  // console.log('b', book, 't', tags)
  function hasAllTags(add) {
    let address = add instanceof RTS.Foreign ? RTS.scm2host(add) : add;
    for (const tag of tags) {
      if (!hasTag(address, tag)) { return false };
    }
    return true;
  }

  return book.filter(address => hasAllTags(address))
})((@1@), RTS.scm2host(@2@));
         #+end_src

         #+begin_src scheme :noweb-ref filter-book-using-tags :noweb yes
(def (filter-book-using-tags book tags)
  (js#expression #<<EOF
 <<has-tags>>
EOF
book tags
))
         #+end_src


    2) Create drop down menu to Select TO address from addresses in address book that:
        a) Has tags have matching the current context;
        b) modifies the context with regard to tags they are allowed to interact with.
        c) Create an option for copy/pasting an address, and/or for adding it to the address book?

            #+begin_src scheme :noweb-ref get-TO-address-book
(def (get-TO-address-book)
  [
   { name: "Xavier "
     hash: (random-hash)
     tags: ["foo" "bar" "rps"] }
   { name: "Wyclef Jean"
     hash: (random-hash)
     tags: ["baz" "moonshine"] }
   { name: "Jimi Hendrix"
     hash: (random-hash)
     tags: ["foo" "rps"]}
   { name: "Yvonne Brown"
     hash: (random-hash)
     tags: ["bar" "foo" "baz"] }
   ]
 )
           #+end_src

     3) Create a drop down menu for asset to be transferred that has the following features:
        a) Amount box: lets you specify the amount of the asset (if it's an NFT, that's 0 or 1).
        b) Option to send "all at address" (minus fees below).
        c) Asset class may default to the "native token" for the current network.
        d) Displays the equivalent value in the user's unit of tax accounting (e.g. USD, CAD).

    4) Information only: fees and totals in both units, in thinner/greyer font
        a) Display the expected associated fees and rates in all relevant units (e.g. GAS + ETH/GAS + ETH + USD).
        b) Display the total in the relevant units (e.g. ETH + USD).
        c) Have tags have match the current context.

    #+begin_src scheme :noweb-ref fees-and-totals
(def (fees-and-totals amount unit blockchain)
  {fee: 0.42 total: (* amount 3.14) })
    #+end_src

* Make components from Gerbil

Right now the UI is mostly HTML and JavaScript. We want Gerbil!

#+begin_src scheme :noweb-ref AddressSelect
;; (def (on-click ctr)
;;   (js#jso
;;    click: (lambda _
;;             (js#statement "console.log('counter:', (@1@), 'change this')" (js#jso-ref ctr count:))
;;             (js#++ (js#jso-ref ctr count:)))))
(js#declaration "const Quasar = require ('quasar');")


(def q-select (js#js->foreign (js#expression "Quasar.QSelect;")))
(def q-inner-loading (js#js->foreign (js#expression "Quasar.QInnerLoading;")))
(def q-spinner-gears (js#js->foreign (js#expression "Quasar.QSpinnerGears;")))

(def (v-model-input this)
  (lambda (e)
    (js#statement "(@1@).$emit('input', (@2@))"
                  (if (foreign? this) (js#foreign->js this) this)
                    (js#scm->js e))))

(def (ensure-scheme-book book)
  (if (and (< 0 (vector-length book))
           (not (foreign? (vector-ref book 0))))
    (vector-map js#js->foreign book)
    book))

(def (filter-book-name-starts-with book starts-with)
  (if starts-with
    (vector-filter
     (lambda (i)
       (string-prefix-ci? starts-with (js#jso-ref i name:)))
     book)
    book))

(def (filter-book this (name-starts-with #f))
  (def newbook (let ((book (js#jso-ref this book:))
                     (tags (js#jso-ref this tags:)))
                 (filter-book-name-starts-with
                  (if (not (js#undefined? tags))
                    (filter-book-using-tags book tags)
                    book)
                  name-starts-with)))
    (js#stmt "console.log('filter-book', (@1@))" this)
  (if (and (< 0 (vector-length newbook))
           (not (foreign? (vector-ref newbook 0))))
    (js#js->scm newbook)
    newbook))

#;(def (filter-book-fn this)
  (js#function (val update _)
    (js#stmt "console.log('filterng', (@1@))" this)
    (update (lambda ()
              (set! (js#jso-ref this filtered-book:)
                (filter-book this val))))))

;;; Add to runtime

(def (round num) (js#js->scm "Math.round(@1@)" (js#scm->js num)))

(def (filter pred lst)
  (cond ((null? lst) '())
        ((pred (car lst))
         (cons (car lst) (filter pred (cdr lst))))
        (else (filter pred (cdr lst)))))

(def (vector-filter pred vec)
  (##list->vector (filter pred (vector->list vec))))

(def (string= ci: (ci #f) s1 s2 (start1 0) (end1 #f) (start2 0) (end2 #f))
  (if (or (not (string? s1))
          (not (string? s2)))
    #f
    (begin
      (unless end1 (set! end1 (string-length s1)))
      (unless end2 (set! end2 (string-length s2)))
      ))

  (js#expression "((s1, s2) => {
 if (@7@) {
  s1 = RTS.host2scm(s1.toString().toLowerCase().toUpperCase());
  s2 = RTS.host2scm(s2.toString().toLowerCase().toUpperCase());
 }
 let v1 = s1.codes.slice((@1@), (@2@));
 let v2 = s2.codes.slice((@3@), (@4@));


 if (v2.length !== v1.length) { return false };

  for(let i = 0 ; i < v1.length ; i++) {

  if (v1[i] !== v2[i]) { return false }
 }

 return true;

})((@5@), (@6@));"
                 start1 end1 start2 end2 s1 s2 ci))

(def (string-prefix-ci? s1 s2)
  ;; SRFI 13
  ;;; Is s1 a prefix/suffix of s2?
  (string= ci: #t s2 s1 0 (string-length s1)))

(def (string-prefix=? str prefix)
  (string= str prefix 0 (string-length prefix)))

(def address-select
  (lambda (resolve _)
    (resolve
     (js#jso
      name: "AddressSelect"
      props: { "value" {}
               tags: { default: #() }
               "new-value-mode" {}
               "book" {}
               label: { default: "Select Address" } }
      data: (lambda _ { filtered-book: #f scheme-book: #f})
      components: { q-select: q-select }
      render:
      (js#function (h)
        (def self js#this)
        (def book (js#jso-ref self book:))
        (def val (js#jso-ref self value:))
        (def new? (js#jso-ref self new-value-mode:))
        (def label (js#jso-ref self label:))
        (def b (js#jso-ref self scheme-book:))
        (def fb (js#jso-ref self filtered-book:))
        (unless (js#undefined? book)

          (js#stmt "console.log('render-book', @1@)" (js#ref self book:))
          (unless fb (set! fb (filter-book self)))
          (h "q-select"
           { props: { use-chips: #t
                      filled: #t
                      use-input: #t
                      options: fb
                      value: val
                      new-value-mode: new?
                      label: label
                      input-debounce: 0 }
            on: { input: (v-model-input js#this)
                  filter:  (lambda  (val update _)
                             (set! fb (filter-book self val))
                             (update (lambda ()
                                       (set! (js#jso-ref self filtered-book:) fb)
                                       #t)
))}})))))))

#+end_src

** <amount/>
#+begin_src scheme :noweb-ref amount

 ;; const amountOptions = ['All at From: Address']
 ;; <q-select
 ;; filled v-model="amount" label="Amount" :options="amountOptions"
 ;; use-input
 ;; use-chips
 ;; new-value-mode="add"
 ;; />


(def amount
  (lambda (go _)
    (go
    { name: "Amount"
      components: { q-select: q-select }
      props: { value: {}
               options: { default: (lambda _ ["All at From: Address"]) }
               label: { default: "Amount" }}
      render: (js#function (h)
                (h "q-select"
                   { props: { filled: #t use-input: #t use-chips: #t
                              new-value-mode: "add"
                              value: (js#jso-ref js#this value:)
                              options: (js#jso-ref js#this options:)
                              label: (js#jso-ref js#this label:)}
                     on: { input: (v-model-input js#this) }}))})))
#+end_src

** <asset/>

#+begin_src scheme :noweb-ref asset
(def (asset go _)
  (go { name: "Asset"
        components: { q-select: q-select }
        props: { value: {}
                 options: { default: (lambda _ ["Native Token" "Moonshine" "CAD"]) }
                 label: { default: "Asset" }}
      render: (js#function (h)  (h "q-select"
                   { props: { filled: #t
                              value: (js#jso-ref js#this value:)
                              options: (js#jso-ref js#this options:)
                              label: (js#jso-ref js#this label:)}
                     on: { input: (v-model-input js#this) }}))
        })
  )
#+end_src


** <target/>

#+begin_src scheme :noweb-ref asset
(def (target go _)
  (go { name: "Target"
        components: { q-select: q-select }
        props: { value: {}
                 options: { default: (lambda _ ["CAD"]) }
                 label: { default: "Target (fiat)" }}
      render: (js#function (h)  (h "q-select"
                   { props: { filled: #t
                              value: (js#jso-ref js#this value:)
                              options: (js#jso-ref js#this options:)
                              label: (js#jso-ref js#this label:)}
                     on: { input: (v-model-input js#this) }}))
        })
  )
#+end_src

** <exchange-rate/>

#+begin_src scheme :noweb-ref asset
(def (exchange-rate go _)
  (go { name: "ExchangeRate"
       components: { q-inner-loading: q-inner-loading q-spinner-gears: q-spinner-gears }
        props: { value: {}
                 target: {}
                 asset: {}
                 label: { default: "Target (fiat)" }}
        data: (lambda _
                { loading: #f live: #f curr: 0 target-symbol: "" token-symbol: "" } )
      render: (js#function (h)
                (def val (js#jso-ref js#this value:))
                (def curr (js#jso-ref js#this curr:))
                (def token (js#jso-ref js#this asset:))
                (def token-symbol (js#jso-ref token symbol:))
                (def fiat (js#jso-ref js#this target:))

                (unless (number? val)
                  (set! val (js#js->scm
                             (js#expr "(() => { try { return Number(@1@) } catch (e) {  return (@1@) }})();"
                                      (js#scm->js val)))))

                (js#stmt "console.warn('Excnage', Number(@1@), @2@, @3@)" val token fiat)

                (when (and (number? val) (> val 0))

                  (when (or (not (= val
                                    (js#jso-ref js#this curr:)))
                            (not (string= token-symbol (js#jso-ref js#this token-symbol:))))
                    (set! (js#jso-ref js#this loading:) #t)
                    (set! (js#jso-ref js#this live:) #f)
                    (set! (js#jso-ref js#this curr:) val))

                  (when (and (js#jso-ref js#this loading:)
                             (not (js#jso-ref js#this live:)))
                    (set! (js#jso-ref js#this token-symbol:) token-symbol)
                    (set! (js#jso-ref js#this live:) #t)
                    (js#.then (coinlayer-live { params: { target: (js#jso-ref fiat symbol:)
                                                          symbols: token-symbol} })
                              (lambda (l)
                                (set! (js#jso-ref js#this loading:) #f)
                                (set! (js#jso-ref js#this live:)
                                  (* val (js#jso-ref l rates: token-symbol)))
                                (js#stmt "console.warn('clist', (@1@))" (js#jso-ref l rates: token-symbol)))))

                  (h "div" [
                             (h "span" { props: { showing: (not (js#jso-ref js#this loading:)) } }
                                ["$" (js#js->scm
                                      (js#expr "(Math.round((@1@ + Number.EPSILON) * 100) / 100).toFixed(2)"
                                               (js#ref js#this live:)))
                                 " "
                             (js#jso-ref fiat symbol:) "<-" token-symbol ])
                             (h "q-inner-loading"
                                { props: { showing: (js#jso-ref js#this loading:) } }
                                [(h "q-spinner-gears" { props: { size: "50px" color: "primary" } })])
                            ]

                 )))
        })
  )
#+end_src

* API
   - /list-identities/ :: To list FROM: addresses

** Client

#+begin_src shell
yarn add axios
#+end_src

#+begin_src scheme :noweb-ref google
(js#decl "const axios = require('axios')")

(def coinlayer-key "bbe3ecfc186356e177696808b423aff6")

(def coinlayer-instance
  (js#js->foreign
   (js#expr "axios.create({
   baseURL: 'https://api.coinlayer.com/',
   timeout: 10000,
   params: { access_key: (@1@) }})"
            (js#scm->js coinlayer-key))))

(def (coinlayer.get url (args {}))
  (js#js->foreign
   (js#expr "(() => {return (@1@).get(@2@, (@3@))})();"
            (js#foreign->js coinlayer-instance)
            (js#scm->js url)
            (js#foreign->js args))))

(def (coinlayer-list (args {}))
 (js#.then (coinlayer.get "/list" args)
           (lambda (r)
               (js#jso-ref r data:))))
(def (coinlayer-live (args {}))
 (js#.then (coinlayer.get "/live" args)
           (lambda (r)
               (js#jso-ref r data:))))

(def (axios.get url)
  (js#stmt "console.error('Getting URL', (@1@))"
           (js#scm->js url))
  (js#js->foreign
   (js#expr "(() => {return axios.get(@1@)})();"
            (js#scm->js url))))


(def (js#.then promise fn)
  (js#js->foreign
   (js#expr "((p) => p.then(RTS.scm2host(@1@)))(@2@);"
            fn (if (foreign? promise)
                 (js#foreign->js promise)
                 promise))))

(def default-server-url "http://localhost:6741/")

(def (glow-server-instance (url default-server-url))
  (js#js->foreign
   (js#expr "axios.create({
   baseURL: (@1@),
   timeout: 100000
});
" (js#scm->js url))))

(def (glow-server.get server url (args {}))
  (js#js->foreign
   (js#expr "(() => {return (@1@).get(@2@, (@3@))})();"
            (js#foreign->js (glow-server-instance server))
            (js#scm->js url)
            (js#foreign->js args))))

(def (glow-server.post server url (args {}))
  (js#js->foreign
   (js#expr "(() => {return (@1@).post(@2@, (@3@))})();"
            (js#foreign->js (glow-server-instance server))
            (js#scm->js url)
            (js#foreign->js args))))

(def (post-transfer transfer (server default-server-url))
  (glow-server.post server "/transfer"  transfer ))

(def (post-process process (server default-server-url))
  (glow-server.post server "/process" process))

(def (get-server-home (server default-server-url))
  (js#.then (glow-server.get server "/home")
            (lambda (r)
              (js#jso-ref r data:))))


(def (add-labels book)
  (js#statement "((ab) => {
 ab.map(a => {
  if (a.label === undefined) {
   a.label = a.name + ' ' + a.hash
  }
  return a
 });
})(RTS.scm2host(@1@));" book)
  book)


(def (get-list-identities (callback (lambda (d) d)))
  (js#.then (axios.get "http://localhost:6741/list-identities")
           (lambda (r)
             (let ((nb (add-labels (js#jso-ref r data:))))
             (js#stmt "console.error('got it!', (@1@))" nb)
             (callback nb)))))




#+end_src
** Server

Eventually we need to call the glow. For now, mockup.


#+begin_src scheme :tangle ../../server.ss
(import :drewc/ftw :std/text/json :std/srfi/13
        (only-in :gerbil/gambit shell-command display-exception)
        (only-in :gerbil/gambit/random random-integer)
        :std/misc/uuid :std/misc/process :gerbil/gambit/threads :gerbil/gambit/ports :std/misc/ports :std/srfi/1)

(export #t (import: :drewc/ftw))

(def server-address "127.0.0.1:6741")
(def server-url (string-append "http://" server-address))

(def ftw-httpd #f)

(def (start-server! (restart? #f))
  (if (and ftw-httpd (not restart?)) ftw-httpd
      (begin
        (when ftw-httpd (stop-ftw-http-server! ftw-httpd))
        (set! ftw-httpd (start-ftw-http-server! server-address))))
  ftw-httpd)

(def processes (make-hash-table))

(def (read-process-lines process (setter (lambda (ls) (display ls))))
  (input-port-timeout-set! process -inf.0)
  (let rl ((go? #t))
    (setter (read-all-as-lines process))
    (when go?
      (if (not (process-status process 0 #f))
        (begin (thread-sleep! 1) (rl []))
        (rl #f)))))

(def (spawn-process fn . args)
  (def uuid (uuid->string (random-uuid)))
  (def proc (cons [] #f))
  (hash-put! processes uuid proc)

  (set-cdr!
   proc
   (spawn run-process
          [fn args ...]
          coprocess: (cut read-process-lines
                          <> (lambda (ls) (set-car! proc (append (car proc) ls))))
          pseudo-terminal: #t))
  uuid)

(def (thread-properties thread)
  (def tstate (thread-state thread))
  (def state (cond ((thread-state-running? tstate) 'running)
                   ((thread-state-waiting? tstate) 'waiting)
                   ((thread-state-abnormally-terminated? tstate) 'abnormally-terminated)
                   ((thread-state-normally-terminated? tstate) 'normally-terminated)))
  (def result (case state
                ((running) #t)
                ((waiting) (thread-state-waiting-for tstate))
                ((abnormally-terminated)
                 (with-output-to-string
                   "" (cut display-exception (thread-state-abnormally-terminated-reason tstate)
                                         (current-output-port))))
                ((normally-terminataed) (thread-state-normally-terminated-result tstate))))
  [["state" . state]
   ["result" . result]])

(def (uuid->process-properties uuid)
  (def proc (hash-get processes uuid))
  (match proc
    ([stdout . thread]
     (let ((threadp (thread-properties thread)))
       [["uuid" . uuid]
        ["thread" (list->hash-table threadp) ...]
        ["output" . stdout]]))))

(def (json<-process-properties uuid)
  (with-output-to-string "" (cut write-json (list->hash-table (uuid->process-properties uuid)))))

(def (random-tags)
  (def tags  [["foo" "bar" "send" "rps"]
              ["bar" "moonshine" "send"]
              ["foo" "moonshine" "rps"]])
  (list-ref tags (random-integer (length tags))))

(def (glow-find-identities)
  (def idstr (cdr (shell-command "env --unset=GERBIL_HOME glow list-identities" #t)))
  (def (ids) (let l ()
             (let ((ln (read-line)))
               (if (eof-object? ln) []
                   [ln (l) ...]))))
  (map (lambda (line)
         (let* ((nh (string-split line #\[))
                (name (string-trim-right (car nh)))
                (hash (string-trim-right (string-trim (car (string-split (cadr nh) #\]))))))
           [["name" . name ]
            ["hash" . hash]
            ["tags" (random-tags) ...]]))
       (with-input-from-string idstr ids)))

(def (glow-list-contacts)
  (def idstr (cdr (shell-command "env --unset=GERBIL_HOME glow list-contacts" #t)))
  (def (ids) (let l ()
             (let ((ln (read-line)))
               (if (eof-object? ln) []
                   [ln (l) ...]))))
  (map (lambda (line)
         (let* ((nh (string-split line #\[))
                (name (string-trim-right (car nh)))
                (hash (string-trim-right (string-trim (car (string-split (cadr nh) #\]))))))
           [["name" . name ]
            ["hash" . hash]
            ["tags" (random-tags) ...]]))
       (with-input-from-string idstr ids)))

(def (glow-list-evm-networks)
  (def evmstr (cdr (shell-command "env --unset=GERBIL_HOME glow list-evm-networks" #t)))
  (def evms (call-with-input-string evmstr read-all-as-lines))
  (map (lambda (line)
         (let* ((n (string-split line #\space))
                (n (list (car n) (list-ref n (- (length n) 1))
                         (string-join (remove (cut string=? "" <>) (drop-right (cdr n) 1)) " "))))
           (match n ([sym url name]
                     [["name" . name ]
                      ["symbol" . sym]
                      ["url"  . url]]))))
           evms))

(def (glow-meta)
  (def str (cdr (shell-command "env --unset=GERBIL_HOME glow meta" #t)))
  (def meta (string-split str #\space))
  (map string-trim-right meta))
(def (glow-version)
  (def str (cdr (shell-command "env --unset=GERBIL_HOME glow version" #t)))
  (string-trim-right str))

(def (json<-glow-find-identities)
  (with-output-to-string "" (cut write-json (map list->hash-table (glow-find-identities)))))

(def (json<-glow-homepage)
  (def ids (map list->hash-table (glow-find-identities)))
  (def cs (map list->hash-table (glow-list-contacts)))
  (def ns (map list->hash-table (glow-list-evm-networks)))
  (def meta (glow-meta))
  (def version (glow-version))
  (with-output-to-string
    "" (cut write-json (list->hash-table
                        [["version" . version ]
                         ["meta" . meta]
                         ["identities" . ids]
                         ["contacts" . cs ]
                         ["networks" . ns]]))))

(def (json/OPTIONS)
  (let (o (assget "Origin" (http-request-headers*)))
    (http-response-write*
     200 `(("Access-Control-Allow-Origin" . ,(or o "*"))
           ("Access-Control-Allow-Credentials" . "true")
           ("Access-Control-Allow-Methods" . "POST, GET, OPTIONS")
           ("Access-Control-Allow-Headers" . "Content-Type"))
     #f)))

(defsyntax (define-json-endpoint stx)
  (syntax-case stx ()
   ((macro name loc)
    (with-syntax ((opt (datum->syntax #'macro (string->symbol
                        (string-append (symbol->string (syntax->datum #'name))
                                       "/OPTIONS")))))
      #'(begin (def opt json/OPTIONS)
               (define-endpoint name loc))))))

(def (respond/json code: (code 200) json)
  (let ((o (assget "Origin" (http-request-headers*)))
        (js (if (not (string? json))
              (json-object->string json)
              json)))
    (http-response-write* code `(("Content-Type" . "application/json")
                                 ("Access-Control-Allow-Origin" . ,(or o "*"))
                                 ("Access-Control-Allow-Credentials" . "true"))
                          js)))

(def (http-request-body-json*)
  (with-input-from-u8vector (http-request-body*) read-json))

(define-endpoint list-identities "list-identities")

(def (list-identities/GET)
  (respond/json (json<-glow-find-identities)))

(define-endpoint default list priority: +inf.0)
(def (default/GET req)
  (respond/json (json<-glow-homepage)))

(define-json-endpoint transfer "transfer")

(def (transfer/POST)
  (let* ((transfer (http-request-body-json*))
         (to (hash-get transfer 'to))
         (from (hash-get transfer 'from))
         (amount (hash-get transfer 'amount))
         (net (hash-get transfer 'network))
         (cmd
          ["glow" "transfer"
           "--to" (hash-get to 'name)
           "--from" (hash-get from 'name)
           "--value" amount
           "--evm-network" (hash-get net 'symbol)])
         (uuid (apply spawn-process cmd))
         (json (json<-process-properties uuid)))
   ; (error (table->list transfer))
    (respond/json json)))

(define-json-endpoint process "process")
(def (process/POST)
  (let* ((proc (http-request-body-json*))
         (uuid (hash-get proc 'uuid)))
    (respond/json (json<-process-properties uuid))))




#+end_src



* Sending Tokens from A to B

This is the end-all-be-all of the task, a UI to do so.

The Input widget needs the following from the API.
** file ~widgets.ss~
#+begin_src scheme :noweb yes :tangle ../../src/assets/widgets.ss
(import :js)

<<AddressSelect>>
<<amount>>
<<asset>>
<<filter-book-using-tags>>

<<google>>

(js#statement "module.exports = {
 AddressSelect: (@1@),
 Amount: (@2@),
 Asset: (@3@),
 getListIdentities: (@4@),
 coinlayerList: (@5@),
 Target: (@6@),
 ExchangeRate: (@7@),
 getServerHome: (@8@),
 postTransfer: (@9@),
 postProcess: (@10@)
};
// console.log('butn', module.exports)"
              (js#scm->js address-select)
              (js#scm->js amount)
              (js#scm->js asset)
              (js#scm->js get-list-identities)
              (js#scm->js coinlayer-list)
              (js#scm->js target)
              (js#scm->js exchange-rate)
              (js#scm->js get-server-home)
              (js#scm->js post-transfer)
              (js#scm->js post-process)

              )
#+end_src

* Address Book : ARCHIVE ME
#+begin_src scheme :tangle ../../src/assets/addressBook.ss :noweb yes
(import :js)
;; (js#declaration "console.log('Loaded Address Book')")

(def (random-hash) (js#expression "'Ox' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);"))


<<get-FROM-address-book>>
<<get-TO-address-book>>


<<filter-book-using-tags>>
<<fees-and-totals>>



(def (add-labels book)
  (js#statement "((ab) => {
return ab.map(a => {
  if (a.label === undefined) {
   a.label = a.name + ' ' + a.hash
  }
  return a
 })
})(RTS.scm2host(@1@));" book)
  book)




;; (js#declaration "let findAddress = undefined")
;; (def (find-address name: (n #f) hash: (h #f) tags: (ts #f) pkey: (pkey #f))


;;   (def ab (ensure-address-book))
;;   (def dresses [])

;;   (js#statement "console.log('Find Address in', (@1@)" ab))

;; (js#statement "findAddress = (name, opts) => {

;; }")

(js#declaration "


function findAddressesByName (name, ab) {
  const needle = name.toLowerCase()
  const newAdds = ab.filter( a => {
     n = a.name.toLowerCase() ; return n.startsWith(needle)
  });
 return newAdds;
};")

(js#statement
 "
let getFromAddressBook = (@2@);
let getToAddressBook = (@3@);
let filterBookUsingTags = (@4@);
let feesAndTotals = (@5@)
module.exports = {
  findAddressesByName,
  getFromAddressBook,
  getToAddressBook,
  filterBookUsingTags,
  feesAndTotals
}"
 #f
 (js#scm->js (lambda (pk) (add-labels (get-FROM-address-book pk))))
 (js#scm->js (lambda () (add-labels (get-TO-address-book))))
 (js#scm->js filter-book-using-tags)
 (js#scm->js fees-and-totals)

 )
#+end_src

This should now work as ~import addressBook from '~assets/addressBook.ss'~

But it doesn't lol. It seems that Quasar uses webpack v4 and this.getOptions is for v5.

Can fix! https://github.com/webpack/loader-utils#getoptions

* Deploy

First, build it as an SPA and test her out!

#+begin_src shell
quasar build
cd dist/spa/
quasar serve
#+end_src

Now create a branch as an orphan. We'll use ~gh-pages~ as that's what github uses sometimes for certain things.

#+begin_src shell
git checkout --orphan gh-pages
git rm -rf .
# rm 'LICENSE'
# rm 'doc/log/0000_Getting-Started.org'
rsync -av dist/spa/ .
git add css/ fonts/ js/ index.html
git commit -m "First attempt at gh-pages"
git push origin gh-pages
#+end_src

** Github pages repo

This is basically because I have yet to use gitlab pages and cannot make it work in the small amout on time

#+begin_src shell
git remote add github git@github.com:drewc/gloui.git
git push github master:main
git push github gh-pages
#+end_src

** Fix the bug

#+begin_src shell
git checkout gh-pages
git rm -rf .

rsync -av dist/spa/ .
git add css/ fonts/ js/ index.html

git commit -m "Fix Coinlayer HTTPS"
git push origin gh-pages

git add css/ fonts/ js/ img/ icons/ favicon.ico index.html
git commit -m "Add img/ and favicon"

git push github gh-pages
git checkout master
#+end_src

* Conclusion

The demo and server have been made live, and it works! A total of ~2d 4:35 *
1.09098~ hours, or ~57.28hrs~.

The actual work on the GUI itself took 32.73 hours.
